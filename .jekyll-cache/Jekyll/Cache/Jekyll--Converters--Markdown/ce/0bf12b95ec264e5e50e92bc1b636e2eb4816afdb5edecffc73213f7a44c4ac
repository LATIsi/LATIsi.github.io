I"<p>JS의 배열은 배열을 흉내낸 객체이다.</p>

<p>배열 길이 메서드</p>

<table>
  <thead>
    <tr>
      <th>메서드 이름</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.length()</code></td>
      <td style="text-align: center">배열의 길이를 알수 있다. 요소가 담기지않은 빈 배열에 있는것은 empty이다.</td>
    </tr>
  </tbody>
</table>

<p><br />
배열 요소 추가 메서드</p>

<table>
  <thead>
    <tr>
      <th>메서드 이름</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.push()</code></td>
      <td style="text-align: center">원래 있는 배열을 직접건들여 추가하는 방식</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.pop()</code></td>
      <td style="text-align: center">위치 상 부모(조상)요소를 기준으로 배치</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.concat()</code></td>
      <td style="text-align: center">원래 있는 배열을 건들지 않고, 배열과 새로운 인자요소를 더해<br />새롭게 배열을 만들어 원본을 유지하는 방식.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">...배열이름</code></td>
      <td style="text-align: center">스프레드 방식(전개연산자).<br /> 매우 간결하게 배열을 합칠 수 있다. 객체나 배열의 내부/ 함수 호출해주는 인자에서 사용한다. <br /> 또한 여러배열을 스프레드 방식으로 가져와 합치는것도 가능하다.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">...rest</code></td>
      <td style="text-align: center">한번에 객체나 배열로 파라미터를 받아오는 변수/함수 인자값으로 자주 쓰인다. <br /> 부분집합으로 사용할때도, …rest를 사용한다. ex) <code class="language-plaintext highlighter-rouge">const {list, ....rest} = 원래 객체</code> 의 결과는, 원래 객체에서 list가 빠진게 저장이된다. <br /> 꼭, 이름을 …rest로 할필요는 없다.</td>
    </tr>
  </tbody>
</table>

<p><br />
배열 순회 메서드</p>

<table>
  <thead>
    <tr>
      <th>메서드 이름</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">foreach문</code></td>
      <td style="text-align: center">array문에서만 사용가능한 순회하며 할일을 할 함수를 지정한뒤 <code class="language-plaintext highlighter-rouge">배열.forEach(함수)</code>를 사용한다.<br /> 그저 결과만 조회해줄 뿐이다.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.map()</code></td>
      <td style="text-align: center">map은 forEach와는 다르게 처리한것을 새로 배열로 리턴한다.<br /> <code class="language-plaintext highlighter-rouge">배열.map()</code>으로 사용을 한다.</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>필터링 메서드</p>

<table>
  <thead>
    <tr>
      <th>메서드 이름</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.filter()</code></td>
      <td style="text-align: center">참이면 필터에 들어가고 거짓이면 제외된다.<br /> 객체의 키 부분은 큰 따옴표로 감싸야한다. 함수는 화살표 함수를 사용해도 좋다.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h1 id="this">this</h1>

<p>this는 호출한 대상에서 실제 함수를 연결하는 것(바인딩!)<br />
브라우저에서 실행시 전역 객체 -&gt; window 객체
터미널에서 실행시 전역 객체 -&gt; global 객체</p>

<ol>
  <li>일반 함수 호출시 this<br />
내부함수안에 있는 this는 전역 개체로 바인딩된다.</li>
  <li>객체 호출시 this는 그 메서드를 호출한 객체로 바인딩 이된다.</li>
  <li>생성자 함수를 호출시 this는 생성자 함수를 통해 생성해 반환되는 객체로 바인딩이된다.</li>
</ol>

<h2 id="내부함수-this-관련-문법">내부함수 this 관련 문법</h2>

<p>apply, call, bind<br />
apply와 call은 함수를 호출하는 함수이다. (첫번째 인자를 this로 세팅하고싶은 객체를 넘겨준다.)</p>

<ol>
  <li>apply<br />
<code class="language-plaintext highlighter-rouge">객체.apply(객체, ["파라미터"]);</code></li>
  <li>call<br />
<code class="language-plaintext highlighter-rouge">객체.call(객체,"파라미터");</code></li>
  <li>bind<br />
bound 함수(bound() = this를 bind에 넣은것)를 리턴해준다.</li>
</ol>

<p>apply와 call의 차이점은, apply함수는 두번째 인자부터 필요한 파라미터를 전부 입력해야하는 방식이다.</p>
:ET